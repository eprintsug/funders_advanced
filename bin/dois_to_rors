#!/usr/bin/perl -w

use FindBin;
use lib "$FindBin::Bin/../../../perl_lib";


=head1 NAME


=head1 SYNOPSIS

=head1 DESCRIPTION


=cut

use EPrints;
use JSON;
use Data::Dumper;

use strict;
use warnings;

my $repoid = $ARGV[0];

#### Repo stuff ####
my $ep = EPrints->new();
my $repo = $ep->repository( $repoid );
unless( $repo )
{
    die( "could not find repository with id: $repoid" );
}

my $filename = "dois_to_rors_log.txt";
open(my $fh, '>', $filename) or die "Could not open file '$filename' $!";

my $debug = "debug_dois_to_rors.txt";
open(my $debug_fh, '>', $debug) or die "Could not open file '$debug' $!";


my $ds = $repo->dataset( "eprint" );
my $list;

my $eprintid = $ARGV[1];
if( defined $eprintid )
{
    $list = EPrints::List->new( repository => $repo, dataset => $ds, ids => [$eprintid] );
}
else
{
    $list = $ds->search;
}

my %funder_cache = ();

$list->map( sub{
    my( undef, undef, $eprint ) = @_;

    return unless $eprint->is_set( "funders_advanced" );
    
    my $update = 0;
    my @new_funders;
    foreach my $funder ( @{$eprint->value( "funders_advanced" )} )
    {
        if( exists $funder->{id} && $funder->{id} =~ m/http:\/\/dx\.doi\.org\/10\.[0-9]*\/([0-9]*)/ )
        {
            my $doi = $1;

            # first does our funder doi exist in our cache?
            if( exists $funder_cache{$doi} )
            {
                my $ror = $funder_cache{$doi}; # may return ror or 0
                
                # only use if a name is returned
                if( $ror )
                {
                    print $debug_fh "Cache result: $doi....$ror\n";
                    $funder->{id} = $ror;
                    $update = 1;
                }            
            }
            else # we need to do a query
            {
                my $result = ror_query( $repo, $doi );
                if( $result )
                {
                    print $debug_fh "Query result: $doi....$result\n";
                    $funder->{id} = $result;
                    $funder_cache{$doi} = $result;
                    print $debug_fh "Cache updated: $doi....$result\n";
                    $update = 1;
                }
                else # no result, store this fact
                {
                    $funder_cache{$doi} = 0;
                    print $debug_fh "Cache updated: $doi....0\n";
                }
            }
        }
        push @new_funders, $funder; # just add to new list as is...
    }

    if( $update )
    {
        print $fh "----Updating EPrint ID: " . $eprint->id . "----\n";
        print $fh "Old Funders:\n";
        print $fh Dumper( \@{$eprint->value( "funders_advanced" )} );
        print $fh "New Funders:\n";
        print $fh Dumper( \@new_funders );
    
        $eprint->set_value( "funders_advanced", \@new_funders );
        $eprint->commit;
    }
});

close $fh;
close $debug_fh;

sub ror_query
{
    my( $repo, $doi ) = @_;

    # build the request
    my $url = "https://api.ror.org/organizations";
    $url .= "?query.advanced=external_ids.FundRef.all:$doi";
    
    my $ua = LWP::UserAgent->new;

    # User-Agent header for politeness
    my $ua_header = $repo->phrase( "archive_name" ) . " ( " . $repo->config( "host" ) . "; mailto:" . $repo->config( "adminemail" ) . ")";

    my $headers = HTTP::Headers->new(
        'Accept' => 'application/json',
        'User-Agent' => $ua_header,
    );

    my $req =  HTTP::Request->new(
        GET => $url,
        $headers,
    );
    
    print $debug_fh "Running query for $doi\n";

    my $res = $ua->request( $req );

    if( $res->is_success )
    {
        # get rate limit interval - we could be quicker than this, but we're not in a massive rush
        my $sleep = 1;
        sleep( $sleep );
            
        my $json = JSON->new->utf8;
        my $content = $json->decode( $res->content );

        # nothing if zero results
        return 0 if( $content->{'number_of_results'} == 0 || $content->{'number_of_results'} > 1 );        

        foreach my $funder ( @{$content->{items}} )
        {
            return $funder->{id};                    
        }
    }
    else # fail :(
    {
        return 0;  
    }
};
